#开发配置
server.port=80

#mysql
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update


# REDIS (RedisProperties)
#spring.redis.host=123.56.251.158
#spring.redis.password=88889999
#spring.redis.port=6379
#spring.redis.pool.max-idle=8
#spring.redis.pool.min-idle=0
#spring.redis.pool.max-active=8
#spring.redis.pool.max-wait=-1

spring.thymeleaf.prefix=classpath:/templates/


#连接初始值，连接池启动时创建的连接数量的初始值
spring.datasource.initial-size=5
#最大连接数据库连接数，设置为0时，表示没有限制
spring.datasource.max-active=100
#连接池等待连接返回的最大等待时间，毫秒单位
spring.datasource.max-wait=10000
#最大空闲值
spring.datasource.max-idle=10
#最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
spring.datasource.min-idle=5
#用来检测连接是否有效的sql，要求是一个查询语句,如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用
spring.datasource.validation-query=SELECT 1
#申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
spring.datasource.test-on-borrow=false
#归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
spring.datasource.test-on-return=false
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.test-while-idle=true
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.time-between-eviction-runs-millis=60000
#连接池中连接可空闲的时间
spring.datasource.min-evictable-idle-time-millis=300000
#使用Tomcat connection pool时，指定jdbc拦截器，分号分隔
spring.datasource.jdbc-interceptors=ConnectionState;SlowQueryReport(threshold=100)


spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory